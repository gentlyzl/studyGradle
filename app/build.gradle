apply plugin: 'com.android.application'
apply from: '../config.gradle'
android {
    compileSdkVersion this.ext.android.compileSdkVersion
    buildToolsVersion this.ext.android.buildToolsVersion

    defaultConfig {
        applicationId this.android.applicationId
        minSdkVersion this.android.minSdkVersion
        targetSdkVersion this.android.targetSdkVersion
        versionCode this.android.versionCode
        versionName this.android.versionName

        testInstrumentationRunner this.android.versionName
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    android {
        lintOptions {
            abortOnError false
        }
    }


}
//为应用程序添加第三方库依赖
dependencies {
    //文件树fileTree,file():单个文件 files()多个文件
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    testImplementation this.dependencie.junit
    androidTestImplementation this.dependencie.runner
    androidTestImplementation this.dependencie.supportEspresso
    implementation this.dependencie.supportDesign
    //第三方引入依赖会打入jar包、war包
    compile(this.dependencie.support_v13) {
        //排除依赖
        exclude('module': 'support-v4')
        //传递依赖 false：禁止传递依赖，不能引入第三方库 true:可以引用第三方库
        transitive false
    }
    //只在编译期间起作用，不在运行期间起作用
    //provided(this.dependencie.supportDesign)
}

/**
 * 执行外部命令
 */

task(name:'apkcopy','apkcopy') {
    Task task ->
        //gradle执行阶段去执行
        task.doLast {
            def sourcePath = getBuildDir().path + "/outputs/apk"
            def targetPath = "/Users/tianyejun/Downloads/"
            def command = "mv -f ${sourcePath} ${targetPath}"
            try {
                //执行命令
                exec {
                    executable 'bash'
                    args '-c', command
                    println "命令执行完毕"
                }
            } catch (GradleException e) {
                e.printStackTrace()
            }
        }
}
