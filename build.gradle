// Top-level build file where you can add configuration options common to all sub-projects/modules.
allprojects {
    repositories {
        google()
        jcenter()

    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}


//在初始化阶段之后和配置阶段之前监听事件
this.beforeEvaluate {
    println "初始化阶段执行完毕"
}
this.gradle.beforeProject {}
this.gradle.afterProject {}
//在初始化之后和执行事件之前监听事件
this.afterEvaluate {
    println "配置阶段执行完毕"
}
//在执行事件之后事件监听回调
this.gradle.buildFinished {
    println "执行阶段执行完毕"
}

/**
 * project
 * 一、相关api
 * 1.getAllprojects():获取所有project
 * 2.getSubprojects():获取当前project下所有子project
 * 3.getParent():获取当前project的父project
 * 4.getRootProject():获取rootProject
 * 二、project的父工程可以完成对子project的配置
 * Project project(String path, Closure configureClosure);
 * 三、对当前结点project和subProject的所有project进行统一配置
 * void allprojects(Closure configureClosure);
 * 四、不包括当前结点工程，只包括它的subProject
 * void subprojects(Closure configureClosure);
 *
 * 二、拓展属性
 * 1.ext{}闭包形式
 * 2.gradle.properties 属性=属性值形式
 *
 * 三、文件相关API
 * 1.文件定位
 * file(path)：从当前project开始查找
 * 2.文件拷贝
 * copy{*     from file{} //拷贝文件路径
 *     into{} //目标文件路径
 *     exclude {}//排除不需要拷贝的文件
 *     rename {}//重命名文件
 *}* 3.文件目录遍历
 *  fileTree
 * */

/**
 * 1.获取所有project
 * @return
 */
def getProjects() {
    println("---------------")
    println("root project")
    println("---------------")
    this.getAllprojects().eachWithIndex {
        Project project, int index ->
            if (index == 0) {
                println("root project:'${project.name}'")
            } else {
                println("+---Project: '${project.name}'")
            }
    }
}


/**
 * 2.获取所有子project
 * @return
 */
println "当前项目所有的project:"
this.getProjects()
println "当前项目所有的子project:"

def getSubProjects() {
    println("---------------")
    println("sub project")
    println("---------------")
    this.getSubprojects().eachWithIndex {
        Project project, int index ->
            println("sub project:'${project.name}'")
    }
}

this.getSubProjects()

/**
 * 3.获取当前project的父project
 * @return
 */
def getParentProject() {
    return this.getParent()
}

println "获取当前project的父project"
//def project = getParentProject()
println "the project parent is ${this.name}"

/**
 * 4.获取rootProject
 */
def getRootPro() {
    this.getRootProject()
}

println "rootProject name is:${getRootPro().name}"

/**
 * 父project 完成对子project配置文件配置
 */
println "父project完全可以操作子project"
project('baselibrary') {
    Project project ->
        apply plugin: 'com.android.library'
        dependencies {

        }
        version("1.0.0.release")
}

/**
 * 对当前结点project和subProject的所有project进行统一配置
 */
println "对当前结点project和subProject的所有project进行统一配置"
allprojects {
    group('com.aixuexi')
    version('1.0.0.release')
}

println project("baselibrary").group

/**
 * 不包括当前结点project只包括subProject的所有project
 *  */
println "不包括当前结点project只包括subProject的所有project"
subprojects {
    Project project ->
        //如果子工程作为libary的都上传到maven仓库
        if (project.plugins.hasPlugin('com.android.libary'))
            apply from: '../pubulishToMaven.gradle'
}


/**
 * 文件操作
 */

println "root file path :${getRootDir().absolutePath}"
println "build file path :${getBuildDir().absolutePath}"
println "the project file path :${getProjectDir().absolutePath}"

/**
 * 文件定位
 */
def getContent(String path) {
    try {
        //从当前project工程开始查找
        def file = file(path)
        return file
    } catch (GradleException e) {
        e.printStackTrace()
    }
}

println "指定文件内容如下："
def file = getContent('config.gradle')
//println file.getText()

/**
 * 文件copy 把app下的文件拷贝到rootProject的build目录下
 * 支持单个文件拷贝、和文件夹拷贝
 */
def getAppProject() {
    getSubprojects().find() {
        Project project ->
            if (project.name == 'app') {
                project.copy {
                    from file { project.getBuildDir().path + '/outputs/apk/debug/' }
                    into project.getRootProject().getBuildDir().path + '/apk'
                    exclude {}//排除不需要拷贝文件
                    rename {}//重命名文件
                }

            }
    }
}

println "文件拷贝："
getAppProject()

/**
 * 文件遍历的同时完成copy
 */
fileTree(getBuildDir().path + '/apk') {
    ConfigurableFileTree fileTree ->
        fileTree.visit {
            FileVisitDetails element ->
                println "the file name is ${element.file.name}"
                //遍历每个文件同时拷贝到另外一个目录
                copy {
                    from element.file
                    into(getBuildDir().path + '/test/apk')
                }
        }
}
//*******************************其他API************************************************************
/**
 *
 */

buildscript {
    ScriptHandler scriptHandler ->
        //配置工程仓库地址
        scriptHandler.repositories {
            RepositoryHandler repositoryHandler ->
                repositoryHandler.jcenter()
                repositoryHandler.google()
                repositoryHandler.mavenCentral()
                repositoryHandler.mavenLocal()
//                repositoryHandler.ivy {}
                //私有仓库1,可以配置多个
                repositoryHandler.maven {
                    //一般为公司名称
                    name 'psersonal'
                    //公司项目代码地址
                    url 'http://localhost:8080:/nexus/repositories/'
                    //配置用户名和密码
                    credentials() {
                        PasswordCredentials passwordCredentials ->
                            passwordCredentials.username = 'admin'
                            passwordCredentials.password = 'admin123'
                    }
                }
                //私有仓库1,可以配置多个
                repositoryHandler.maven {
                    //一般为公司名称
                    name 'personal'
                    //公司项目代码地址
                    url 'http://localhost:8081:/nexus/repositories/'
                    //配置用户名和密码
                    credentials {
                        PasswordCredentials passwordCredentials ->
                            passwordCredentials.username = 'zhangsan'
                            passwordCredentials.password = 'zhangsan123456'
                    }
                }
        }
        //配置工程'插件'依赖地址,gradle本身对第三方库依赖
        scriptHandler.dependencies() {
            DependencyHandler handler ->
                handler.classpath 'com.android.tools.build:gradle:3.6.1'
        }
}




